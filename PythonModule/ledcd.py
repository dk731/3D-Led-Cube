# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ledcd
else:
    import _ledcd

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Brush(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r = property(_ledcd.Brush_r_get, _ledcd.Brush_r_set)
    g = property(_ledcd.Brush_g_get, _ledcd.Brush_g_set)
    b = property(_ledcd.Brush_b_get, _ledcd.Brush_b_set)
    brigthness = property(_ledcd.Brush_brigthness_get, _ledcd.Brush_brigthness_set)

    def __init__(self):
        _ledcd.Brush_swiginit(self, _ledcd.new_Brush())
    __swig_destroy__ = _ledcd.delete_Brush

# Register Brush in _ledcd:
_ledcd.Brush_swigregister(Brush)

class Pixel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    g = property(_ledcd.Pixel_g_get, _ledcd.Pixel_g_set)
    r = property(_ledcd.Pixel_r_get, _ledcd.Pixel_r_set)
    b = property(_ledcd.Pixel_b_get, _ledcd.Pixel_b_set)

    def __init__(self):
        _ledcd.Pixel_swiginit(self, _ledcd.new_Pixel())
    __swig_destroy__ = _ledcd.delete_Pixel

# Register Pixel in _ledcd:
_ledcd.Pixel_swigregister(Pixel)

class ShmFlags(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    frame_ready = property(_ledcd.ShmFlags_frame_ready_get, _ledcd.ShmFlags_frame_ready_set)
    lock = property(_ledcd.ShmFlags_lock_get, _ledcd.ShmFlags_lock_set)
    sync = property(_ledcd.ShmFlags_sync_get, _ledcd.ShmFlags_sync_set)
    other = property(_ledcd.ShmFlags_other_get, _ledcd.ShmFlags_other_set)

    def __init__(self):
        _ledcd.ShmFlags_swiginit(self, _ledcd.new_ShmFlags())
    __swig_destroy__ = _ledcd.delete_ShmFlags

# Register ShmFlags in _ledcd:
_ledcd.ShmFlags_swigregister(ShmFlags)

class ShmBuf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    buf = property(_ledcd.ShmBuf_buf_get, _ledcd.ShmBuf_buf_set)
    flags = property(_ledcd.ShmBuf_flags_get, _ledcd.ShmBuf_flags_set)

    def __init__(self):
        _ledcd.ShmBuf_swiginit(self, _ledcd.new_ShmBuf())
    __swig_destroy__ = _ledcd.delete_ShmBuf

# Register ShmBuf in _ledcd:
_ledcd.ShmBuf_swigregister(ShmBuf)

class CubeDrawer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, brightness=0.1, sync=True):
        _ledcd.CubeDrawer_swiginit(self, _ledcd.new_CubeDrawer(brightness, sync))

    def set_brigthness(self, b):
        return _ledcd.CubeDrawer_set_brigthness(self, b)

    def set_color(self, *args):
        return _ledcd.CubeDrawer_set_color(self, *args)

    def test_tuple(self, args):
        return _ledcd.CubeDrawer_test_tuple(self, args)

    def foo(self, b):
        return _ledcd.CubeDrawer_foo(self, b)
    __swig_destroy__ = _ledcd.delete_CubeDrawer

# Register CubeDrawer in _ledcd:
_ledcd.CubeDrawer_swigregister(CubeDrawer)



