# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ledcd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ledcd')
    _ledcd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ledcd', [dirname(__file__)])
        except ImportError:
            import _ledcd
            return _ledcd
        try:
            _mod = imp.load_module('_ledcd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ledcd = swig_import_helper()
    del swig_import_helper
else:
    import _ledcd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

EPSILON = _ledcd.EPSILON
DEF_LINEW = _ledcd.DEF_LINEW
DEF_ZHEIGHT = _ledcd.DEF_ZHEIGHT
class Brush(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Brush, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Brush, name)
    __repr__ = _swig_repr
    __swig_setmethods__["g"] = _ledcd.Brush_g_set
    __swig_getmethods__["g"] = _ledcd.Brush_g_get
    if _newclass:
        g = _swig_property(_ledcd.Brush_g_get, _ledcd.Brush_g_set)
    __swig_setmethods__["r"] = _ledcd.Brush_r_set
    __swig_getmethods__["r"] = _ledcd.Brush_r_get
    if _newclass:
        r = _swig_property(_ledcd.Brush_r_get, _ledcd.Brush_r_set)
    __swig_setmethods__["b"] = _ledcd.Brush_b_set
    __swig_getmethods__["b"] = _ledcd.Brush_b_get
    if _newclass:
        b = _swig_property(_ledcd.Brush_b_get, _ledcd.Brush_b_set)
    __swig_setmethods__["rr"] = _ledcd.Brush_rr_set
    __swig_getmethods__["rr"] = _ledcd.Brush_rr_get
    if _newclass:
        rr = _swig_property(_ledcd.Brush_rr_get, _ledcd.Brush_rr_set)
    __swig_setmethods__["gg"] = _ledcd.Brush_gg_set
    __swig_getmethods__["gg"] = _ledcd.Brush_gg_get
    if _newclass:
        gg = _swig_property(_ledcd.Brush_gg_get, _ledcd.Brush_gg_set)
    __swig_setmethods__["bb"] = _ledcd.Brush_bb_set
    __swig_getmethods__["bb"] = _ledcd.Brush_bb_get
    if _newclass:
        bb = _swig_property(_ledcd.Brush_bb_get, _ledcd.Brush_bb_set)
    __swig_setmethods__["brigthness"] = _ledcd.Brush_brigthness_set
    __swig_getmethods__["brigthness"] = _ledcd.Brush_brigthness_get
    if _newclass:
        brigthness = _swig_property(_ledcd.Brush_brigthness_get, _ledcd.Brush_brigthness_set)

    def __init__(self):
        this = _ledcd.new_Brush()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ledcd.delete_Brush
    __del__ = lambda self: None
Brush_swigregister = _ledcd.Brush_swigregister
Brush_swigregister(Brush)
cvar = _ledcd.cvar
MAT4_SIZE = cvar.MAT4_SIZE

class Pixel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pixel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pixel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["g"] = _ledcd.Pixel_g_set
    __swig_getmethods__["g"] = _ledcd.Pixel_g_get
    if _newclass:
        g = _swig_property(_ledcd.Pixel_g_get, _ledcd.Pixel_g_set)
    __swig_setmethods__["r"] = _ledcd.Pixel_r_set
    __swig_getmethods__["r"] = _ledcd.Pixel_r_get
    if _newclass:
        r = _swig_property(_ledcd.Pixel_r_get, _ledcd.Pixel_r_set)
    __swig_setmethods__["b"] = _ledcd.Pixel_b_set
    __swig_getmethods__["b"] = _ledcd.Pixel_b_get
    if _newclass:
        b = _swig_property(_ledcd.Pixel_b_get, _ledcd.Pixel_b_set)

    def __init__(self):
        this = _ledcd.new_Pixel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ledcd.delete_Pixel
    __del__ = lambda self: None
Pixel_swigregister = _ledcd.Pixel_swigregister
Pixel_swigregister(Pixel)

class ShmBuf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShmBuf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShmBuf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["shm_buf_lock"] = _ledcd.ShmBuf_shm_buf_lock_set
    __swig_getmethods__["shm_buf_lock"] = _ledcd.ShmBuf_shm_buf_lock_get
    if _newclass:
        shm_buf_lock = _swig_property(_ledcd.ShmBuf_shm_buf_lock_get, _ledcd.ShmBuf_shm_buf_lock_set)
    __swig_setmethods__["new_frame_lock"] = _ledcd.ShmBuf_new_frame_lock_set
    __swig_getmethods__["new_frame_lock"] = _ledcd.ShmBuf_new_frame_lock_get
    if _newclass:
        new_frame_lock = _swig_property(_ledcd.ShmBuf_new_frame_lock_get, _ledcd.ShmBuf_new_frame_lock_set)
    __swig_setmethods__["buf"] = _ledcd.ShmBuf_buf_set
    __swig_getmethods__["buf"] = _ledcd.ShmBuf_buf_get
    if _newclass:
        buf = _swig_property(_ledcd.ShmBuf_buf_get, _ledcd.ShmBuf_buf_set)

    def __init__(self):
        this = _ledcd.new_ShmBuf()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ledcd.delete_ShmBuf
    __del__ = lambda self: None
ShmBuf_swigregister = _ledcd.ShmBuf_swigregister
ShmBuf_swigregister(ShmBuf)

class ParseFuncs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParseFuncs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParseFuncs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["get_size"] = _ledcd.ParseFuncs_get_size_set
    __swig_getmethods__["get_size"] = _ledcd.ParseFuncs_get_size_get
    if _newclass:
        get_size = _swig_property(_ledcd.ParseFuncs_get_size_get, _ledcd.ParseFuncs_get_size_set)
    __swig_setmethods__["get_item"] = _ledcd.ParseFuncs_get_item_set
    __swig_getmethods__["get_item"] = _ledcd.ParseFuncs_get_item_get
    if _newclass:
        get_item = _swig_property(_ledcd.ParseFuncs_get_item_get, _ledcd.ParseFuncs_get_item_set)

    def __init__(self):
        this = _ledcd.new_ParseFuncs()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ledcd.delete_ParseFuncs
    __del__ = lambda self: None
ParseFuncs_swigregister = _ledcd.ParseFuncs_swigregister
ParseFuncs_swigregister(ParseFuncs)

PY_TUPLE_PARSE = _ledcd.PY_TUPLE_PARSE
PY_LIST_PARSE = _ledcd.PY_LIST_PARSE
CALL_POINT_TYPE = _ledcd.CALL_POINT_TYPE
CALL_POLYGON_TYPE = _ledcd.CALL_POLYGON_TYPE
CALL_TETR_TYPE = _ledcd.CALL_TETR_TYPE
CALL_LINE_TYPE = _ledcd.CALL_LINE_TYPE
CALL_CIRCLE_TYPE = _ledcd.CALL_CIRCLE_TYPE
CALL_FCIRCLE_TYPE = _ledcd.CALL_FCIRCLE_TYPE
CALL_SPHERE_TYPE = _ledcd.CALL_SPHERE_TYPE
CALL_FSPHERE_TYPE = _ledcd.CALL_FSPHERE_TYPE
CALL_CLEAR_TYPE = _ledcd.CALL_CLEAR_TYPE
class DrawCall(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawCall, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DrawCall, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _ledcd.DrawCall_type_set
    __swig_getmethods__["type"] = _ledcd.DrawCall_type_get
    if _newclass:
        type = _swig_property(_ledcd.DrawCall_type_get, _ledcd.DrawCall_type_set)
    __swig_setmethods__["color"] = _ledcd.DrawCall_color_set
    __swig_getmethods__["color"] = _ledcd.DrawCall_color_get
    if _newclass:
        color = _swig_property(_ledcd.DrawCall_color_get, _ledcd.DrawCall_color_set)
    __swig_setmethods__["data"] = _ledcd.DrawCall_data_set
    __swig_getmethods__["data"] = _ledcd.DrawCall_data_get
    if _newclass:
        data = _swig_property(_ledcd.DrawCall_data_get, _ledcd.DrawCall_data_set)

    def __init__(self):
        this = _ledcd.new_DrawCall()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ledcd.delete_DrawCall
    __del__ = lambda self: None
DrawCall_swigregister = _ledcd.DrawCall_swigregister
DrawCall_swigregister(DrawCall)

class Transform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Transform, name)
    __repr__ = _swig_repr
    __swig_setmethods__["translation"] = _ledcd.Transform_translation_set
    __swig_getmethods__["translation"] = _ledcd.Transform_translation_get
    if _newclass:
        translation = _swig_property(_ledcd.Transform_translation_get, _ledcd.Transform_translation_set)
    __swig_setmethods__["rotation"] = _ledcd.Transform_rotation_set
    __swig_getmethods__["rotation"] = _ledcd.Transform_rotation_get
    if _newclass:
        rotation = _swig_property(_ledcd.Transform_rotation_get, _ledcd.Transform_rotation_set)
    __swig_setmethods__["scale"] = _ledcd.Transform_scale_set
    __swig_getmethods__["scale"] = _ledcd.Transform_scale_get
    if _newclass:
        scale = _swig_property(_ledcd.Transform_scale_get, _ledcd.Transform_scale_set)
    __swig_setmethods__["local_final"] = _ledcd.Transform_local_final_set
    __swig_getmethods__["local_final"] = _ledcd.Transform_local_final_get
    if _newclass:
        local_final = _swig_property(_ledcd.Transform_local_final_get, _ledcd.Transform_local_final_set)
    __swig_setmethods__["final"] = _ledcd.Transform_final_set
    __swig_getmethods__["final"] = _ledcd.Transform_final_get
    if _newclass:
        final = _swig_property(_ledcd.Transform_final_get, _ledcd.Transform_final_set)
    __swig_setmethods__["rx"] = _ledcd.Transform_rx_set
    __swig_getmethods__["rx"] = _ledcd.Transform_rx_get
    if _newclass:
        rx = _swig_property(_ledcd.Transform_rx_get, _ledcd.Transform_rx_set)
    __swig_setmethods__["ry"] = _ledcd.Transform_ry_set
    __swig_getmethods__["ry"] = _ledcd.Transform_ry_get
    if _newclass:
        ry = _swig_property(_ledcd.Transform_ry_get, _ledcd.Transform_ry_set)
    __swig_setmethods__["rz"] = _ledcd.Transform_rz_set
    __swig_getmethods__["rz"] = _ledcd.Transform_rz_get
    if _newclass:
        rz = _swig_property(_ledcd.Transform_rz_get, _ledcd.Transform_rz_set)
    __swig_setmethods__["local_recalc"] = _ledcd.Transform_local_recalc_set
    __swig_getmethods__["local_recalc"] = _ledcd.Transform_local_recalc_get
    if _newclass:
        local_recalc = _swig_property(_ledcd.Transform_local_recalc_get, _ledcd.Transform_local_recalc_set)
    __swig_setmethods__["recalc"] = _ledcd.Transform_recalc_set
    __swig_getmethods__["recalc"] = _ledcd.Transform_recalc_get
    if _newclass:
        recalc = _swig_property(_ledcd.Transform_recalc_get, _ledcd.Transform_recalc_set)

    def update_local(self):
        return _ledcd.Transform_update_local(self)

    def update_global(self, prev):
        return _ledcd.Transform_update_global(self, prev)

    def __init__(self):
        this = _ledcd.new_Transform()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ledcd.delete_Transform
    __del__ = lambda self: None
Transform_swigregister = _ledcd.Transform_swigregister
Transform_swigregister(Transform)

class CubeDrawer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CubeDrawer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CubeDrawer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        get_obj = staticmethod(_ledcd.CubeDrawer_get_obj)
    else:
        get_obj = _ledcd.CubeDrawer_get_obj
    __swig_setmethods__["draw_immediate"] = _ledcd.CubeDrawer_draw_immediate_set
    __swig_getmethods__["draw_immediate"] = _ledcd.CubeDrawer_draw_immediate_get
    if _newclass:
        draw_immediate = _swig_property(_ledcd.CubeDrawer_draw_immediate_get, _ledcd.CubeDrawer_draw_immediate_set)
    __swig_setmethods__["is_sync"] = _ledcd.CubeDrawer_is_sync_set
    __swig_getmethods__["is_sync"] = _ledcd.CubeDrawer_is_sync_get
    if _newclass:
        is_sync = _swig_property(_ledcd.CubeDrawer_is_sync_get, _ledcd.CubeDrawer_is_sync_set)
    __swig_setmethods__["delta_time"] = _ledcd.CubeDrawer_delta_time_set
    __swig_getmethods__["delta_time"] = _ledcd.CubeDrawer_delta_time_get
    if _newclass:
        delta_time = _swig_property(_ledcd.CubeDrawer_delta_time_get, _ledcd.CubeDrawer_delta_time_set)

    def get_cur_color(self):
        return _ledcd.CubeDrawer_get_cur_color(self)

    def push_matrix(self):
        return _ledcd.CubeDrawer_push_matrix(self)

    def pop_matrix(self):
        return _ledcd.CubeDrawer_pop_matrix(self)

    def update_matrix(self):
        return _ledcd.CubeDrawer_update_matrix(self)

    def translate(self, *args):
        return _ledcd.CubeDrawer_translate(self, *args)

    def rotate(self, *args):
        return _ledcd.CubeDrawer_rotate(self, *args)

    def scale(self, *args):
        return _ledcd.CubeDrawer_scale(self, *args)

    def clear(self, *args):
        return _ledcd.CubeDrawer_clear(self, *args)

    def show(self):
        return _ledcd.CubeDrawer_show(self)

    def set_fps_cap(self, fps):
        return _ledcd.CubeDrawer_set_fps_cap(self, fps)

    def set_brigthness(self, *args):
        return _ledcd.CubeDrawer_set_brigthness(self, *args)

    def set_color(self, *args):
        return _ledcd.CubeDrawer_set_color(self, *args)

    def point(self, *args):
        return _ledcd.CubeDrawer_point(self, *args)

    def poly(self, *args):
        return _ledcd.CubeDrawer_poly(self, *args)

    def tetr(self, *args):
        return _ledcd.CubeDrawer_tetr(self, *args)

    def line(self, *args):
        return _ledcd.CubeDrawer_line(self, *args)

    def circle(self, *args):
        return _ledcd.CubeDrawer_circle(self, *args)

    def filled_circle(self, *args):
        return _ledcd.CubeDrawer_filled_circle(self, *args)

    def sphere(self, *args):
        return _ledcd.CubeDrawer_sphere(self, *args)

    def filled_sphere(self, *args):
        return _ledcd.CubeDrawer_filled_sphere(self, *args)
CubeDrawer_swigregister = _ledcd.CubeDrawer_swigregister
CubeDrawer_swigregister(CubeDrawer)

def CubeDrawer_get_obj():
    return _ledcd.CubeDrawer_get_obj()
CubeDrawer_get_obj = _ledcd.CubeDrawer_get_obj

# This file is compatible with both classic and new-style classes.


